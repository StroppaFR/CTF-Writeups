#!/usr/bin/python3
import base64
import string

enc = open("message.enc", "rb").read()
enc = base64.b64decode(enc)

# Step 1 - Choose charsets and infer possible characters in the key
key_len = 20
plain_charset = string.ascii_letters + string.digits + " .,?!{}_-'\":;%\n"
key_charset = string.ascii_letters + string.digits + " -_{}"

for i in range(key_len):
    candidates = [] # The valid candidates for key[i]
    subset = enc[i::key_len] # Subset of characters from the encrypted data that are encrypted with key[i]
    for c in key_charset:
        total_in_charset = sum(1 for d in subset if chr(ord(c) ^ d) in plain_charset)
        if total_in_charset == len(subset):
            candidates.append(c)
    #print(f"key[{i}]:", candidates)

# Partial decrypt the encrypted text from part of the key
def partial_decrypt(enc, key):
    dec = ""
    for i, c in enumerate(enc):
        k = key[i % len(key)]
        if k == "*":
            dec += "*"
        else:
            dec += chr(ord(k) ^ c)
    return dec

# Update the key using a crib in the plaintext and its position
def update_key(crib, crib_pos, enc, key):
    new_key = [c for c in key]
    for i, c in enumerate(crib):
        if c != '*':
            key_char = chr(ord(c) ^ enc[crib_pos + i])
            key_pos = (crib_pos + i) % len(key)
            assert(key[key_pos] == "*" or key[key_pos] == key_char) # Avoid regression in figuring out the key. If this fails the crib or our key is wrong
            new_key[key_pos] = key_char
    return "".join(new_key)

# Step 2 guess part of the key
key = "**********s3cr3t k3y"
dec = partial_decrypt(enc, key)
print(key, dec, sep="\n")
print()

# Step 3 recover the key and plaintext using cribs
key = update_key("that XOR", dec.index("that XO*"), enc, key)
key = update_key("your flag", dec.index("your fla*"), enc, key)
key = update_key("_1mp0ss1ble}", dec.index("_1mp0ss1bl**"), enc, key)
dec = partial_decrypt(enc, key)
print(key, dec)
print()

key = update_key("I didn't think", dec.index("I didn't thi**"), enc, key)
dec = partial_decrypt(enc, key)
print(key, dec, sep="\n")
print()

key = update_key("very impressed", dec.index("very impre******"), enc, key)
dec = partial_decrypt(enc, key)
print(key, dec, sep="\n")
print()

key = update_key("prove me wrong", dec.index("prove me w**ng"), enc, key)
dec = partial_decrypt(enc, key)
print(key, dec, sep="\n")
print()
